## Construction

describe("List('A)", {
  let empty = list()
  let intList = list(1, 4, 2, 3)
  let strList = list("aaa", "ddd", "bbb", "ccc", "zzz")

  it("length()", {
    assert.equal(empty.length(), 0)
    assert.equal(intList.length(), 4)
    assert.equal(strList.length(), 5)
  })

  it("empty()", {
    assert.isTrue(empty.empty())
    assert.isFalse(intList.empty())
    assert.isFalse(strList.empty())
  })

  it("==", {
    assert.isTrue(list(1, 4, 2, 3) == intList)
    assert.isFalse(list(4, 3, 1) == intList)
    assert.isFalse(list("no") == strList)
    assert.isFalse(empty == intList)
    assert.isFalse(empty == strList)
  })

  it("<<", {
    let l = list(1)

    l << 3
    assert.equal(l, list(1, 3))
    assert.equal(l << 7, list(1, 3, 7))
  })

  it("+", {
    let one = list(1, 1, 1)
    let two = list(2, 2, 2, 2)

    assert.equal(one + two, list(1, 1, 1, 2, 2, 2, 2))

    assert.equal(one + some(10), list(1, 1, 1, 10))
    assert.equal(two + none, two)
  })

  it("at()", {
    assert.equal(intList.at(0), some(1))
    assert.equal(intList.at(12), none)
  })

  it("put()", {
    let l = list(1, 10, 100)

    assert.equal(l.put(1, 2), l)
    assert.equal(l, list(1, 2, 100))
  })

  it("first() and last()", {
    assert.equal(strList.first(), some("aaa"))
    assert.equal(strList.last(), some("zzz"))

    assert.equal(empty.first(), none)
    assert.equal(empty.last(), none)
  })

  it("do()", {
    let r0: List(Int) = list()
    intList.do({ each: Int | r0 << each + 1 })
    assert.equal(r0, list(2, 5, 3, 4))

    let r1: List(Int) = list()
    strList.do({ each: String, index: Int | r1 << index })
    assert.equal(r1, list(0, 1, 2, 3, 4))
  })

  it("map()", {
    let r0 = intList.map({ each: Int | each * 2 })
    assert.equal(r0, list(2, 8, 4, 6))

    let r1 = intList.map({ each: Int, index: Int | each + (index * 10) })
    assert.equal(r1, list(1, 14, 22, 33))
  })

  it("flatMap()", {
    let r0 = intList.flatMap({ each: Int |
      list(each, each * 2)
    })
    assert.equal(r0, list(1, 2, 4, 8, 2, 4, 3, 6))

    let r1 = intList.flatMap({ each: Int, index: Int |
      list(index, each)
    })
    assert.equal(r1, list(0, 1, 1, 4, 2, 2, 3, 3))

    let r2 = intList.flatMap({ each: Int | if {each % 2 == 0} then {each * 10} })
    assert.equal(r2, list(40, 20))

    let r3 = intList.flatMap({ each: Int, index: Int | if {index % 2 == 0} then {each * 100} })
    assert.equal(r3, list(100, 200))
  })

  it("reduce()", {
    let r0 = intList.reduce(0, { acc: Int, each: Int | acc + each })
    assert.equal(r0, 10)

    let r1 = intList.reduce(list(0), { acc: List(Int), each: Int | acc << each << each + 10 })
    assert.equal(r1, list(0, 1, 11, 4, 14, 2, 12, 3, 13))
  })

  it("fold()", {
    let r = intList.fold({ acc: Int, each: Int | acc * each })
    assert.equal(r, 24)
  })

  it("filter()", {
    let r = intList.filter({ each: Int | each % 2 == 0 })
    assert.equal(r, list(4, 2))
  })
})
